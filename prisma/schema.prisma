generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  name     String
  image    String?  @default("https://img.freepik.com/vector-premium/icono-perfil-avatar-predeterminado-imagen-usuario-redes-sociales-icono-avatar-gris-silueta-perfil-blanco-ilustracion-vectorial_561158-3407.jpg?w=740")
  role     Role     @default(USER)
  phone    String   @unique
  isBanned Boolean  @default(false)
  favorites Course[]  @relation("FavoriteCourses")
  orders   Order[]
  reviews  Review[]
  courses  Course[] @relation("PurchasedCourses")
}

model Video {
  id          String  @id @default(uuid())
  title       String
  description String
  url         String
  courseId    String
  course      Course  @relation(fields: [courseId], references: [id])
}

model Course {
  id           String   @id @default(uuid())
  title        String
  description  String
  technologies String[]
  price        Float
  thumbnail    String   @default("")
  isAvailable  Boolean  @default(true)
  isfree       Boolean  @default(false)
  rating       Float    @default(5)
  Orders       Order[]
  favoritedBy  User[]   @relation("FavoriteCourses")
  reviews      Review[]
  videos       Video[]
  users        User[]   @relation("PurchasedCourses")
}

model Order {
  id        String       @id @default(uuid())
  userId    String
  createdAt DateTime     @default(now())
  status    Boolean      @default(false)
  courseId  String
  updatedAt DateTime     @default(now())
  course    Course       @relation(fields: [courseId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
  details   OrderDetail?
}

model OrderDetail {
  id       String  @id @default(uuid())
  orderId  String  @unique
  quantity Int
  price    Float
  ticket   String?
  order    Order   @relation(fields: [orderId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  content   String
  userId    String
  courseId  String
  rating    Int      @default(5)
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}
